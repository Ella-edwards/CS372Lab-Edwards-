// Ella Edwards
// 1/25/2024
// Recursive tower of Hanoi


#include <iostream>
#include <chrono>
#include <stack>


void hanoi_recursive(int n, char source, char target, char auxiliary) {
    
    if (n > 0) {
        
        hanoi_recursive(n - 1, source, auxiliary, target);
        // Move the nth disk from source to target
        std::cout << "Move disk " << n << " from " << source << " to " << target << std::endl;
        hanoi_recursive(n - 1, auxiliary, target, source);
    }
}

void hanoi_iterative(int n, char source, char target, char auxiliary) {
  
    std::stack<std::tuple<int, char, char, char, int>> stack;
    stack.push({n, source, target, auxiliary, 0});

    while (!stack.empty()) {
        auto [current_n, current_source, current_target, current_auxiliary, current_state] = stack.top();
        stack.pop();

        if (current_n > 0) {
            if (current_state == 0) {
            
                stack.push({current_n - 1, current_auxiliary, current_target, current_source, 0});
                stack.push({current_n, current_source, current_target, current_auxiliary, 1});
                stack.push({current_n - 1, current_source, current_auxiliary, current_target, 0});
            } else {
                // Move the nth disk from source to target
                std::cout << "Move disk " << current_n << " from " << current_source << " to " << current_target << std::endl;
            }
        }
    }
}

int main() {
    
    std::vector<int> disk_numbers = {5, 10, 15, 20, 25, 30, 35};

    for (int disks : disk_numbers) {
       
        auto start_recursive = std::chrono::high_resolution_clock::now();
        hanoi_recursive(disks, 'A', 'C', 'B');
        auto end_recursive = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_recursive = end_recursive - start_recursive;

        std::cout << "Recursive Hanoi with " << disks << " disks took " << elapsed_recursive.count() << " seconds." << std::endl;

        // time for iterative Towers of Hanoi
        auto start_iterative = std::chrono::high_resolution_clock::now();
        hanoi_iterative(disks, 'A', 'C', 'B');
        auto end_iterative = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_iterative = end_iterative - start_iterative;

        std::cout << "Iterative Hanoi with " << disks << " disks took " << elapsed_iterative.count() << " seconds." << std::endl;
    }

    return 0;
}

